#
# These don't come up by default; wait for the puppetserver to load, `vagrant
# up` the clients you want to testV
# -*- mode: ruby -*-
# vim: set syntax=ruby ts=2 sw=2 et:

require 'pry'
require 'mkmf'
require 'yaml'

SIMP_OPTIONS = YAML.load_file( 'Vagrantfile.yaml' )
status_file = '/proc/sys/crypto/fips_enabled'
FIPS_MODE_ON_HOST = (File.exist?(status_file) && File.open(status_file, &:readline)[0].chr == '1')
warn( "FIPS mode detected on host: #{FIPS_MODE_ON_HOST}" )

def vbox_fips_vrde_config(vb, fips_mode_on_host)
  if fips_mode_on_host
    vb.customize ['modifyvm', :id, '--vrdeproperty', 'Security/Method=negotiate']

    unless File.file? SIMP_OPTIONS['x509']['cacerts_file']
      warn "WARNING: FIPS MODE enabled on host, but cert '#{SIMP_OPTIONS['x509']['cacerts_file']}' doesn't exist; VRDE may not work!"
    end
    vb.customize ['modifyvm', :id, '--vrdeproperty', "Security/CACertificate=#{SIMP_OPTIONS['x509']['cacerts_file']}"]

    unless File.file? SIMP_OPTIONS['x509']['server_cert']
      warn "WARNING: FIPS MODE enabled on host, but cert '#{SIMP_OPTIONS['x509']['server_cert']}' doesn't exist; VRDE may not work!"
    end
    vb.customize ['modifyvm', :id, '--vrdeproperty', "Security/ServerCertificate=#{SIMP_OPTIONS['x509']['server_cert']}"]

    unless File.file? SIMP_OPTIONS['x509']['server_private_key']
      warn "WARNING: FIPS MODE enabled on host, but cert '#{SIMP_OPTIONS['x509']['server_private_key']}' doesn't exist; VRDE may not work!"
    end
    vb.customize ['modifyvm', :id, '--vrdeproperty', "Security/ServerPrivateKey=#{SIMP_OPTIONS['x509']['server_private_key']}"]
  end
end


Vagrant.configure("2") do |config|
  config.ssh.insert_key = false
  config.vm.define 'puppetserver', primary: true do |v|
    v.vm.box = SIMP_OPTIONS['simp_puppetserver_box_name']

    # URL where box will be fetched if it doesn't already exist on the system
    v.vm.box_url = SIMP_OPTIONS['simp_puppetserver_json_url']
    v.vm.box_check_update = 'false'

    # This creats the `/vagrant` folder on the SUT, which gives the vagrant SSH
    # user a place to upload and exec `shell` provisioner files.  SIMP locks
    # down its partitions so tightly that every other location that vagrant can
    # upload files to is `noexec`!
    #
    # (PROTIP: The local `shared` folder doesn't actually need to exist).
    v.vm.synced_folder 'shared', '/vagrant', create: true, type: 'rsync', rsync_exclude: '.git/'

    # These network details were generated by simp-packer with your .box file.
    # If they were different, you'll need to change them here.
    v.vm.network :private_network,
      ip:                  "192.168.103.7",
      netmask:             "255.255.255.0",
      name:                "vboxnet2",
      mac:                 "aabbcccc0007",
      auto_config:         false,
      virtualbox__intnet:  'pxe_network'

    v.vm.provider :virtualbox do |vb|
      vb.customize [
                    'modifyvm', :id,
                    '--memory', '4096',
                    '--cpus', '2',
                    '--natdnshostresolver1', 'on',
                    # this is to stop VirtualBox from blocking ALSA
                    '--audio', 'null',
                   ]
      vb.customize ['modifyvm', :id, '--vrde', 'on']
      vb.customize ['modifyvm', :id, '--vrdeauthtype', 'null']
      vbox_fips_vrde_config(vb, FIPS_MODE_ON_HOST)
    end

    {
      'Additional Puppet roles and profiles'    => 'site',
      'Additional Hiera data files'             => 'data',
      'Additional Vagrant provisioning scripts' => 'scripts.d',
      'Additional /root directory files'        => 'root',
    }.each do |dir_purpose,  source_dir|
      v.vm.provision dir_purpose,
                     type: 'file',
                     source: "#{__dir__}/shared/#{source_dir}",
                     destination: "/vagrant/#{source_dir}"
    end

    if SIMP_OPTIONS['os_iso_files'] && !SIMP_OPTIONS['os_iso_files'].empty?
      isos_dir = SIMP_OPTIONS['isos_dir'] || '/var/simp/ISOs'
      v.vm.provision "Ensure #{isos_dir} dir exists",
                     type: 'shell',
                     upload_path: '/vagrant/.ensure-isos-dir-exists.sh',
                     inline: "mkdir -p #{isos_dir} && chown vagrant #{isos_dir}"
      SIMP_OPTIONS['os_iso_files'].each do |iso_file|
        unless File.file? iso_file
          warn "ISO FILE NOT FOUND (skipping upload): #{iso_file}"
          next
        end
        v.vm.provision "Upload #{iso_file} to #{isos_dir}",
                       type: 'file',
                       source: iso_file,
                       destination: "#{isos_dir}/"
      end
    end

    script_num = 0
    base_script_dir = File.join(__dir__,'shared','')
    Dir[File.join( base_script_dir,'scripts.d','*.{sh,bash,rb}')].each do |script|
      script_num += 1
      base_script_path = script.split(base_script_dir).last
      remote_script_path = File.expand_path(base_script_path, '/vagrant')
      v.vm.provision "Script #{script_num}: '#{remote_script_path}'",
                     type: 'shell',
                     upload_path: "/vagrant/run-vagrant-script-#{script_num}.sh",
                     inline: "source #{remote_script_path}",
                     privileged: true
    end
  end

  # PXE boot clients
  [8,7,6].each do |el|
    config.vm.define "pxe#{el}".to_sym, autostart: false do |pxe_client|
      pxe_client.vm.box = 'empty_box'
      pxe_client.vm.boot_timeout = 3600
      pxe_client.vm.provider :virtualbox do |vb|
        vb.memory = '2048'  # needs to be *over* 1024 for EL7
        vb.cpus   = '2'
        vb.customize [
          'modifyvm', :id,
          '--nic1', 'intnet',
          '--intnet1', 'pxe_network',
          '--macaddress1', "aabbcccc002#{el}",
          '--boot1', 'disk',  # <- starts empty, boots after kickstart loads OS
          '--boot2', 'net',   # <- falls through to kickstart when disk is empty
          '--boot3', 'none',
          '--boot4', 'none'
        ]

        vb.customize ['modifyvm', :id, '--vrde', 'on']
        vb.customize ['modifyvm', :id, '--vrdeauthtype', 'null']
        vb.customize ['modifyvm', :id, '--vrdeport', '5951-5999,3389-3399']
        vbox_fips_vrde_config(vb, FIPS_MODE_ON_HOST)
      end
    end
  end
end
