[color]
  ui = true
  interactive = auto
  grep = auto
[color.grep]
  linenumber = "bold yellow"
  filename   = "bold green"
  match      = "reverse yellow"
[push]
  default = simple
[core]
  whitespace = blank-at-eol,space-before-tab,tab-in-indent,trailing-space
  editor = vim
[merge]
  tool = vimdiff
  conflictstyle = diff3
[mergetool]
  prompt = false
[alias]
  # recommended: https://gist.github.com/5310/d46b4d7fd69741a118717d28f2d9d789
  ss = status --short --branch

  # list local and remote branches by date
  branch-dates = for-each-ref --sort='-committerdate:iso8601' \
    --format='%(objectname:short)%12  %(committerdate:iso8601)%09%(refname)' \
    refs/heads refs/remotes
  bdates = "!f(){ git branch-dates | head -${1:-10}; }; f"
  bd     = "!f(){ git bdates $@; }; f"

  branch-description = "branch --edit-description"

  # colorful log with one-line entries
  lg = log --color --graph  --abbrev-commit \
    --pretty=format:'%C(red)%h%C(reset) -%C(yellow)%d%Creset %s %Cgreen(%ci) %C(bold blue)<%an>%Creset'

  # colorful log with a summary of updated files
  lgf = log --color --graph  --abbrev-commit --name-status \
    --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci) %C(bold blue)<%an>%Creset'

  # colorful log with a summary of updated files & the commit message
  lgff = log --color  --abbrev-commit --name-status \
    --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci) %C(bold blue)<%an>%Creset\n\n%B'

  # colorful log with a summary of updated files & the commit message
  lgfff = log --color --abbrev-commit --name-status \
    --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s%n          GIT_COMMITTER_DATE=\"%Cgreen%ci%C(reset)\" GIT_AUTHOR_DATE=\"%C(red)%ai%C(reset)\"%n          GIT_AUTHOR_NAME=\"%C(bold blue)%an%C(reset)\"\n\n%B'

  # colorful log with relative dates (e.g., "5 weeks ago")
  lgh = log --color --graph  --abbrev-commit \
    --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'

  # colorful log with a summary of updated files
  lgfh = log --color --graph  --abbrev-commit --name-status \
    --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'

  # colorful log with a summary of updated files & the commit message
  lgfffh = log --color --abbrev-commit --name-status \
    --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%n          GIT_COMMITTER_DATE=\"%Cgreen%ci%C(reset)\" GIT_AUTHOR_DATE=\"%C(red)%ai%C(reset)\"%n          GIT_AUTHOR_NAME=\"%C(bold blue)%an%C(reset)\"\n\n%B'


  # https://csswizardry.com/2017/05/little-things-i-like-to-do-with-git/#view-complex-logs
  #
  # "...For more forensic details I use --graph-based logs for --all branches
  # showing commit --stats (additions, deletions). --decorate will give me
  # information about which branch a commit was made on where applicable, and I
  # also get a much stricter date format."
  #
  lgraph = log --graph --all --decorate --stat --date=iso

  # https://serverfault.com/a/165222
  #
  # Usage: `git reauthor $START..$END`
  #
  reauthor = !sh -c 'eval `git log --reverse --topo-order \
    --pretty=format:\"git cherry-pick %H &&  git commit --amend -C %H --author=\\\"%aN <%aE>\\\" && \" $0 ` "echo success" '

  # xxx
  cg = "!f() { curbr=`git rev-parse --abbrev-ref HEAD`; git diff --shortstat gerrit/$curbr upstream/$curbr; }; f"

  # Fix r10k
  pack = "!f() { git repack -ad && rm -f `git rev-parse --show-toplevel`/.git/objects/info/alternates; }; f"
  r10k-fix = "!f() { git pack; }; f"


  # From:
  #   https://github.com/GitAlias/gitalias/blob/master/gitalias.txt and
  #   https://gist.github.com/dgageot/492227

  ### grep ###

  # Find text in any commit ever.
  grep-all = !"f() { git rev-list --all | xargs git grep \"$@\"; }; f"

  # Find text and group the output lines. Also aliased as `gg`.
  grep-group = grep --break --heading --line-number

  # grep with ack-like formatting
  ack = "!f() { git grep-group; }; f"

  ### LOG ALIASES ###

  # Show log of changes, most recent first
  log-changes = log --oneline --reverse

  # Show log of new commits after you fetched, with stats, excluding merges
  log-fresh = log ORIG_HEAD.. --stat --no-merges

  # Show log with dates in our local timezone
  log-local = log --date=local

  # Show the log for my own user email
  log-me = !git log --author $(git config user.email)

  # Show log as a graph
  log-graph = log --graph --all --oneline --decorate

  # Show the date of the first commit
  log-first-date = !"git log --date-order --date=iso --pretty=%ad --reverse | head -1"

  # Show the recent day
  log-day = log --since yesterday

  # Summarize your own changes since yesterday, suitable for a daily standup meeting.
  log-standup = !git log --since yesterday --author $(git config user.email) --pretty=short

  log-refs = log --all --graph --decorate --oneline --simplify-by-decoration --no-merges
  log-timeline = log --format='%h %an %ar - %s'
  # FIXME: don't assume origin
  log-local = log --oneline origin..HEAD
  log-fetched = log --oneline HEAD..origin/master

  # Ours & Theirs - easy merging when you know which files you want
  #
  # Sometimes during a merge you want to take a file from one side wholesale.
  #
  # The following aliases expose the ours and theirs commands which let you
  # pick a file(s) from the current branch or the merged branch respectively.
  #
  #   * ours: checkout our version of a file and add it
  #   * theirs: checkout their version of a file and add it
  #
  # N.b. the function is there as hack to get $@ doing
  # what you would expect it to as a shell user.
  #
  ours   = !"f() { git checkout --ours $@ && git add $@; }; f"
  theirs = !"f() { git checkout --theirs $@ && git add $@; }; f"

  # Work In Progress: from https://gist.github.com/492227 and VonC on stackoverflow.
  # This enables a quick way to add all new and modified files to the index,
  # while cleaning the index from the files removed from the working tree;
  # this cleaning will facilite a rebase, because there won't be any conlfict
  # due to an "unclean" working directory (not in sync with the index).
  # The unwip will restore the deleted files to the working tree.
  wip = !"git add --all; git ls-files --deleted -z | xargs -0 git rm; git commit --message=wip"
  unwip = !"git log -n 1 | grep -q -c wip && git reset HEAD~1"

  ### LOOKUP ALIASES ###

  # whois: given a string for an author, try to figure out full name and email:
  whois = "!sh -c 'git log --regexp-ignore-case -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"

  # Given any git object, try to show it briefly
  whatis = show --no-patch --pretty='tformat:%h (%s, %ad)' --date=short

  # Show who contributed with summarized changes
  who = shortlog --summary --

  # Show who contributed, in descending order by number of commits
  whorank = shortlog --summary --numbered --no-merges

  # List all issues mentioned in commit messages between range of commits
  #
  # Replace `\\\"ISSUE-[0-9]\\+\\\"` regular expression with one matching your issue tracking system.
  # For Jira it should be as simple as putting your project name in place of `ISSUE`.
  #
  # Best used with tags:
  #  $ git issues v1.0..v1.1
  #
  # But will work with any valid commit range:
  #  $ git issues master..HEAD

  issues = !sh -c \"git log $1 --oneline | grep -o \\\"SIMP-[0-9]\\+\\\" | sort -u\"

  # churn: show log of files that have many changes
  #
  #   * Written by (Corey Haines)[http://coreyhaines.com/]
  #   * Scriptified by Gary Bernhardt
  #   * Obtained from https://github.com/garybernhardt/dotfiles/blob/master/bin/git-churn
  #   * Edited for sixarm_git_config repo by Joel Parker Henderson
  #   * Comments by Mislav http://mislav.uniqpath.com/2014/02/hidden-documentation/
  #
  # Show churn for whole repo:
  #
  #   $ git churn
  #
  # Show churn for specific directories:
  #
  #   $ git churn app lib
  #
  # Show churn for a time range:
  #
  #   $ git churn --since='1 month ago'
  #
  # These are all standard arguments to `git log`.
  #
  # It's possible to get valuable insight from history of a project not only
  # by viewing individual commits, but by analyzing sets of changes as a whole.
  # For instance, git-log-churn compiles stats about which files change the most.
  #
  # For example, to see where work on an app was focused on in the past month:
  #
  #     $ git churn --since='1 month ago' app/ | tail
  #
  # This can also highlight potential problems with technical debt in a project.
  # A specific file changing too often is generally a red flag, since it probably
  # means the file either needed to be frequently fixed for bugs, or the file
  # holds too much responsibility and should be split into smaller units.
  #
  # Similar methods of history analysis can be employed to see which people were
  # responsible recently for development of a certain part of the codebase.
  #
  # For instance, to see who contributed most to the API part of an application:
  #
  #    $ git log --format='%an' --since='1 month ago' app/controllers/api/ | \
  #      sort | uniq -c | sort -rn | head
  #
  #    109 Alice Anderson
  #    13 Bob Brown
  #    7 Carol Clark
  #
  churn = !git log --all --find-copies --find-renames --name-only --format='format:' "$@" | sort | grep -v '^$' | uniq -c | sort | awk 'BEGIN {print "count\tfile"} {print $1 "\t" $2}' | sort -g
